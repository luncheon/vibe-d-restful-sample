doctype html
html
    head
        meta(charset="utf-8")
        title Users
        link(rel="stylesheet", type="text/css", href="/w2ui/w2ui-1.4.2.min.css")
        script(src="//code.jquery.com/jquery-git2.min.js")
        script(src="/w2ui/w2ui-1.4.2.min.js")
        :css
            body { margin: 0; padding: 0; font-family: Verdana,'Meiryo UI',Arial,sans-serif; }
            #header { padding: 8px 32px; background-color: rgb(32, 32, 32); color: rgb(196, 196, 196); }
            #content { padding: 8px; }
            .toolbar-button { background: inherit; color: inherit; border: none; cursor: pointer; }
            input, button, select, textarea { font-family: inherit; font-weight: inherit; }
            .w2ui-reset, .w2ui-reset table, .w2ui-tag .w2ui-tag-body, .w2ui-lock-msg, .w2ui-list ul li, .w2ui-list ul li:last-child input, .w2ui-overlay .w2ui-select-field table, .w2ui-popup { font-family: inherit; }
            .w2ui-col-on-off td[colspan="2"] { display: none; } /* hide 'Save Grid State', 'Restore Default State' */
        script& w2ui.localize
        :javascript
            var api = {
                users: {
                    ajax: function (url, method, data) {
                        return $.ajax({
                            url:         url,
                            type:        method,
                            data:        JSON.stringify(data),
                            contentType: 'application/json',
                            dataType:    'json',
                            cache:       false,
                        }).fail(function (xhr, status, thrown) {
                            console.error({xhr: xhr, status: status, thrown: thrown}, xhr.responseText);
                            alert(thrown);
                        });
                    },
                    get:    function ()         { return api.users.ajax('/users',       'GET'); },
                    delete: function (id)       { return api.users.ajax('/users/' + id, 'DELETE'); },
                    create: function (data)     { return api.users.ajax('/users',       'POST', data); },
                    update: function (id, data) { return api.users.ajax('/users/' + id, 'PUT',  data); },
                }
            };
    body
        #header
            div(align="right")
                - if (req.session && req.session.get!string("user.id"))
                    button.toolbar-button(onclick="$(this).w2overlay($('#login-form').html());")
                        = req.session.get!string("user.name")
                    #login-form(style="display: none;")
                        div(style="padding: 8px;")
                            form(action="/logout", method="POST")
                                button.btn Logout
                    :javascript
                        var editable = true;
                - else
                    button.toolbar-button(onclick="$(this).w2overlay($('#login-form').html()); $('input[name=id]').focus();") Login
                    #login-form(style="display: none;")
                        form(action="/login", method="POST", style="padding: 12px;")
                            .w2ui-field
                                label ID:
                                div
                                    input(type="text", name="id")
                            .w2ui-field
                                label Password:
                                div
                                    input(type="password", name="password")
                            div(align="center")
                                button.btn(type="submit") Login
                    :javascript
                        var editable = false;
        #content
            #users
            :javascript
                var deletedIds = [];
                $('#users').w2grid({
                    name: 'users',
                    header: 'Users',
                    fixedBody: false,
                    show: {
                        header:        true,
                        toolbar:       true,
                        toolbarAdd:    editable,
                        toolbarDelete: editable,
                        toolbarSave:   editable,
                    },
                    columns: [
                        { field: 'id',       caption: 'ID',       size: '20%', editable: editable && {type: 'text'} },
                        { field: 'password', caption: 'Password', size: '30%', editable: editable && {type: 'password'}, render: function (record) { return '******' } },
                        { field: 'name',     caption: 'Name',     size: '50%', editable: editable && {type: 'text'} },
                    ],
                    onReload: function (event) {
                        var self = this;
                        deletedIds = [];
                        api.users.get().done(function (data) {
                            var recid = 0;
                            self.records = data.map(function (item) { return {recid: ++recid, originalId: item.id, id: item.id, name: item.name} });
                            self.refresh();
                        });
                    },
                    onAdd: function (event) {
                        var newid = this.records.reduce(function (max, item) { return Math.max(max, item.recid) }, 0) + 1;
                        this.add({ recid: newid, id: '', name: '' });
                        this.editField(newid, 0);
                    },
                    onDelete: function (event) {
                        this.getSelection().forEach(function (recid) {
                            var id = this.get(recid).originalId;
                            if (typeof id !== 'undefined') {
                                deletedIds.push(id);
                            }
                        }, this);
                        event.force = true;
                    },
                    onSubmit: function (event) {
                        var deferreds = deletedIds.map(api.users.delete)
                            .concat(event.changes.map(function (changes) {
                                var record = this.get(changes.recid);
                                if (record.originalId) {
                                    return api.users.update(record.originalId, changes);
                                } else {
                                    return api.users.create(changes);
                                }
                            }, this));
                        $.when.apply($, deferreds).then($.proxy(this.onReload, this));
                    },
                }).onReload();
