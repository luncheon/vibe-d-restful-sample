- import vibe.web.web;
- auto loggedin = req.session.id && req.session.get!string("user.id");

doctype html
html
    head
        meta(charset="utf-8")
        title Users
        link(rel="stylesheet", type="text/css", href="/w2ui/w2ui-1.4.2.min.css")
        link(rel="stylesheet", type="text/css", href="/default.css")
        script(src="//code.jquery.com/jquery-git2.min.js")
        script(src="/w2ui/w2ui-1.4.2.min.js")
        script& w2ui.localize
        script.
            var editable = #{loggedin};
            var localized = {
                name:     '#{trWeb("name")}',
                password: '#{trWeb("password")}',
            };
        :javascript
            var RestClient = (function () {
                'use strict';

                var request = function (url, method, data) {
                    return $.ajax({
                        url:         url,
                        type:        method,
                        data:        data ? JSON.stringify(data) : '',
                        contentType: 'application/json',
                        dataType:    'json',
                        cache:       false,
                    }).fail(function (xhr, status, thrown) {
                        console.error({xhr: xhr, status: status, thrown: thrown}, xhr.responseText);
                        alert(thrown);
                    });
                };

                return function (baseurl) {
                    this.get    = function ()         { return request(baseurl,            'GET'); };
                    this.delete = function (id)       { return request(baseurl + '/' + id, 'DELETE'); };
                    this.create = function (data)     { return request(baseurl,            'POST', data); };
                    this.update = function (id, data) { return request(baseurl + '/' + id, 'PUT', data); };
                };
            })();
    body
        #header
            div(align="right")
                - if (loggedin)
                    button.toolbar-button(onclick="$(this).w2overlay($('#login-form').html());")= req.session.get!string("user.name")
                    #login-form(style="display: none;")
                        form(action="/logout", method="POST", style="padding: 8px;")
                            button.btn& logout
                - else
                    button.toolbar-button(onclick="$(this).w2overlay($('#login-form').html()); $('input[name=id]').focus();")& login
                    #login-form(style="display: none;")
                        // w2ui 1.4.2 sucks! pressing enter key doesn't submit forms!
                        form(action="/login", method="POST", style="padding: 12px;", onkeypress="if(event.keyCode===13){this.submit();return false;}")
                            .w2ui-field
                                label ID:
                                div
                                    input(type="text", name="id")
                            .w2ui-field
                                label= trWeb("password")~":"
                                div
                                    input(type="password", name="password")
                            div(align="center")
                                button.btn(type="submit")& login
        #content
            #users
        :javascript
            (function () {
                'use strict';

                var api = { users: new RestClient('/users') };
                var deletedIds = [];
                $('#users').w2grid({
                    name: 'users',
                    header: 'Users',
                    fixedBody: false,
                    show: {
                        header:        true,
                        toolbar:       true,
                        toolbarAdd:    editable,
                        toolbarDelete: editable,
                        toolbarSave:   editable,
                    },
                    columns: [
                        { field: 'id',       caption: 'ID',               size: '20%', editable: editable && {type: 'text'} },
                        { field: 'password', caption: localized.password, size: '30%', editable: editable && {type: 'password'}, render: function (record) { return '******' } },
                        { field: 'name',     caption: localized.name,     size: '50%', editable: editable && {type: 'text'} },
                    ],
                    onReload: function (event) {
                        var self = this;
                        deletedIds = [];
                        api.users.get().done(function (data) {
                            var recid = 0;
                            self.records = data.map(function (item) { return {recid: ++recid, originalId: item.id, id: item.id, name: item.name} });
                            self.refresh();
                        });
                    },
                    onAdd: function (event) {
                        var newid = this.records.reduce(function (max, item) { return Math.max(max, item.recid) }, 0) + 1;
                        this.add({ recid: newid, id: '', name: '' });
                        this.editField(newid, 0);
                    },
                    onDelete: function (event) {
                        this.getSelection().forEach(function (recid) {
                            var id = this.get(recid).originalId;
                            if (typeof id !== 'undefined') {
                                deletedIds.push(id);
                            }
                        }, this);
                        event.force = true;
                    },
                    onSubmit: function (event) {
                        var deferreds = deletedIds.map(api.users.delete)
                            .concat(event.changes.map(function (changes) {
                                var record = this.get(changes.recid);
                                if (record.originalId) {
                                    return api.users.update(record.originalId, changes);
                                } else {
                                    return api.users.create(changes);
                                }
                            }, this));
                        $.when.apply($, deferreds).then($.proxy(this.onReload, this));
                    },
                }).onReload();
            })();
